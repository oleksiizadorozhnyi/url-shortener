// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "perviymoiserver/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetLinkByLongUrl provides a mock function with given fields: longUrl, ctx
func (_m *Storage) GetLinkByLongUrl(longUrl string, ctx context.Context) (model.Page, error) {
	ret := _m.Called(longUrl, ctx)

	var r0 model.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(string, context.Context) (model.Page, error)); ok {
		return rf(longUrl, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) model.Page); ok {
		r0 = rf(longUrl, ctx)
	} else {
		r0 = ret.Get(0).(model.Page)
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(longUrl, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkByShortUrl provides a mock function with given fields: shortUrl, ctx
func (_m *Storage) GetLinkByShortUrl(shortUrl string, ctx context.Context) (model.Page, error) {
	ret := _m.Called(shortUrl, ctx)

	var r0 model.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(string, context.Context) (model.Page, error)); ok {
		return rf(shortUrl, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) model.Page); ok {
		r0 = rf(shortUrl, ctx)
	} else {
		r0 = ret.Get(0).(model.Page)
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(shortUrl, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLongUrlAlreadyExists provides a mock function with given fields: longUrl, ctx
func (_m *Storage) IsLongUrlAlreadyExists(longUrl string, ctx context.Context) bool {
	ret := _m.Called(longUrl, ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, context.Context) bool); ok {
		r0 = rf(longUrl, ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsShortUrlAlreadyExists provides a mock function with given fields: shortUrl, ctx
func (_m *Storage) IsShortUrlAlreadyExists(shortUrl string, ctx context.Context) bool {
	ret := _m.Called(shortUrl, ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, context.Context) bool); ok {
		r0 = rf(shortUrl, ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveLink provides a mock function with given fields: link, ctx
func (_m *Storage) SaveLink(link model.Page, ctx context.Context) error {
	ret := _m.Called(link, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Page, context.Context) error); ok {
		r0 = rf(link, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
